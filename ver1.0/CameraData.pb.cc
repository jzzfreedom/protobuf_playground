// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CameraData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CameraData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace camera {
class CameraDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CameraData> {
} _CameraData_default_instance_;

namespace protobuf_CameraData_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraData, origin_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraData, origin_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraData, compressed_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraData, compressed_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraData, camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraData, recording_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraData, showing_ae_roi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraData, byte_buffer_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CameraData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CameraData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "CameraData.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _CameraData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CameraData_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020CameraData.proto\022\006camera\"\313\002\n\nCameraDat"
      "a\022\024\n\014origin_width\030\001 \001(\005\022\025\n\rorigin_height"
      "\030\002 \001(\005\022\030\n\020compressed_width\030\003 \001(\005\022\031\n\021comp"
      "ressed_height\030\004 \001(\005\022.\n\006camera\030\005 \001(\0162\036.ca"
      "mera.CameraData.camera_type\022\021\n\trecording"
      "\030\006 \001(\010\022\026\n\016showing_AE_ROI\030\007 \001(\010\022\023\n\013byte_b"
      "uffer\030\010 \001(\014\"k\n\013camera_type\022\022\n\016forward_na"
      "rrow\020\000\022\020\n\014forward_wide\020\001\022\023\n\017backward_nar"
      "row\020\002\022\010\n\004left\020\003\022\t\n\005right\020\004\022\014\n\010interior\020\005"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 368);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CameraData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_CameraData_2eproto

const ::google::protobuf::EnumDescriptor* CameraData_camera_type_descriptor() {
  protobuf_CameraData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CameraData_2eproto::file_level_enum_descriptors[0];
}
bool CameraData_camera_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CameraData_camera_type CameraData::forward_narrow;
const CameraData_camera_type CameraData::forward_wide;
const CameraData_camera_type CameraData::backward_narrow;
const CameraData_camera_type CameraData::left;
const CameraData_camera_type CameraData::right;
const CameraData_camera_type CameraData::interior;
const CameraData_camera_type CameraData::camera_type_MIN;
const CameraData_camera_type CameraData::camera_type_MAX;
const int CameraData::camera_type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraData::kOriginWidthFieldNumber;
const int CameraData::kOriginHeightFieldNumber;
const int CameraData::kCompressedWidthFieldNumber;
const int CameraData::kCompressedHeightFieldNumber;
const int CameraData::kCameraFieldNumber;
const int CameraData::kRecordingFieldNumber;
const int CameraData::kShowingAEROIFieldNumber;
const int CameraData::kByteBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraData::CameraData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CameraData_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:camera.CameraData)
}
CameraData::CameraData(const CameraData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  byte_buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.byte_buffer().size() > 0) {
    byte_buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byte_buffer_);
  }
  ::memcpy(&origin_width_, &from.origin_width_,
    reinterpret_cast<char*>(&showing_ae_roi_) -
    reinterpret_cast<char*>(&origin_width_) + sizeof(showing_ae_roi_));
  // @@protoc_insertion_point(copy_constructor:camera.CameraData)
}

void CameraData::SharedCtor() {
  byte_buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&origin_width_, 0, reinterpret_cast<char*>(&showing_ae_roi_) -
    reinterpret_cast<char*>(&origin_width_) + sizeof(showing_ae_roi_));
  _cached_size_ = 0;
}

CameraData::~CameraData() {
  // @@protoc_insertion_point(destructor:camera.CameraData)
  SharedDtor();
}

void CameraData::SharedDtor() {
  byte_buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CameraData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraData::descriptor() {
  protobuf_CameraData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CameraData_2eproto::file_level_metadata[0].descriptor;
}

const CameraData& CameraData::default_instance() {
  protobuf_CameraData_2eproto::InitDefaults();
  return *internal_default_instance();
}

CameraData* CameraData::New(::google::protobuf::Arena* arena) const {
  CameraData* n = new CameraData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraData::Clear() {
// @@protoc_insertion_point(message_clear_start:camera.CameraData)
  byte_buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&origin_width_, 0, reinterpret_cast<char*>(&showing_ae_roi_) -
    reinterpret_cast<char*>(&origin_width_) + sizeof(showing_ae_roi_));
}

bool CameraData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:camera.CameraData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 origin_width = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 origin_height = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origin_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 compressed_width = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compressed_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 compressed_height = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compressed_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .camera.CameraData.camera_type camera = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera(static_cast< ::camera::CameraData_camera_type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool recording = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recording_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool showing_AE_ROI = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showing_ae_roi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes byte_buffer = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byte_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:camera.CameraData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:camera.CameraData)
  return false;
#undef DO_
}

void CameraData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:camera.CameraData)
  // int32 origin_width = 1;
  if (this->origin_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->origin_width(), output);
  }

  // int32 origin_height = 2;
  if (this->origin_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->origin_height(), output);
  }

  // int32 compressed_width = 3;
  if (this->compressed_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->compressed_width(), output);
  }

  // int32 compressed_height = 4;
  if (this->compressed_height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->compressed_height(), output);
  }

  // .camera.CameraData.camera_type camera = 5;
  if (this->camera() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->camera(), output);
  }

  // bool recording = 6;
  if (this->recording() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->recording(), output);
  }

  // bool showing_AE_ROI = 7;
  if (this->showing_ae_roi() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->showing_ae_roi(), output);
  }

  // bytes byte_buffer = 8;
  if (this->byte_buffer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->byte_buffer(), output);
  }

  // @@protoc_insertion_point(serialize_end:camera.CameraData)
}

::google::protobuf::uint8* CameraData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:camera.CameraData)
  // int32 origin_width = 1;
  if (this->origin_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->origin_width(), target);
  }

  // int32 origin_height = 2;
  if (this->origin_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->origin_height(), target);
  }

  // int32 compressed_width = 3;
  if (this->compressed_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->compressed_width(), target);
  }

  // int32 compressed_height = 4;
  if (this->compressed_height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->compressed_height(), target);
  }

  // .camera.CameraData.camera_type camera = 5;
  if (this->camera() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->camera(), target);
  }

  // bool recording = 6;
  if (this->recording() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->recording(), target);
  }

  // bool showing_AE_ROI = 7;
  if (this->showing_ae_roi() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->showing_ae_roi(), target);
  }

  // bytes byte_buffer = 8;
  if (this->byte_buffer().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->byte_buffer(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:camera.CameraData)
  return target;
}

size_t CameraData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:camera.CameraData)
  size_t total_size = 0;

  // bytes byte_buffer = 8;
  if (this->byte_buffer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->byte_buffer());
  }

  // int32 origin_width = 1;
  if (this->origin_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->origin_width());
  }

  // int32 origin_height = 2;
  if (this->origin_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->origin_height());
  }

  // int32 compressed_width = 3;
  if (this->compressed_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->compressed_width());
  }

  // int32 compressed_height = 4;
  if (this->compressed_height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->compressed_height());
  }

  // .camera.CameraData.camera_type camera = 5;
  if (this->camera() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera());
  }

  // bool recording = 6;
  if (this->recording() != 0) {
    total_size += 1 + 1;
  }

  // bool showing_AE_ROI = 7;
  if (this->showing_ae_roi() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:camera.CameraData)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:camera.CameraData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:camera.CameraData)
    MergeFrom(*source);
  }
}

void CameraData::MergeFrom(const CameraData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:camera.CameraData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.byte_buffer().size() > 0) {

    byte_buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byte_buffer_);
  }
  if (from.origin_width() != 0) {
    set_origin_width(from.origin_width());
  }
  if (from.origin_height() != 0) {
    set_origin_height(from.origin_height());
  }
  if (from.compressed_width() != 0) {
    set_compressed_width(from.compressed_width());
  }
  if (from.compressed_height() != 0) {
    set_compressed_height(from.compressed_height());
  }
  if (from.camera() != 0) {
    set_camera(from.camera());
  }
  if (from.recording() != 0) {
    set_recording(from.recording());
  }
  if (from.showing_ae_roi() != 0) {
    set_showing_ae_roi(from.showing_ae_roi());
  }
}

void CameraData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:camera.CameraData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraData::CopyFrom(const CameraData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:camera.CameraData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraData::IsInitialized() const {
  return true;
}

void CameraData::Swap(CameraData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraData::InternalSwap(CameraData* other) {
  byte_buffer_.Swap(&other->byte_buffer_);
  std::swap(origin_width_, other->origin_width_);
  std::swap(origin_height_, other->origin_height_);
  std::swap(compressed_width_, other->compressed_width_);
  std::swap(compressed_height_, other->compressed_height_);
  std::swap(camera_, other->camera_);
  std::swap(recording_, other->recording_);
  std::swap(showing_ae_roi_, other->showing_ae_roi_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraData::GetMetadata() const {
  protobuf_CameraData_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CameraData_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraData

// int32 origin_width = 1;
void CameraData::clear_origin_width() {
  origin_width_ = 0;
}
::google::protobuf::int32 CameraData::origin_width() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.origin_width)
  return origin_width_;
}
void CameraData::set_origin_width(::google::protobuf::int32 value) {
  
  origin_width_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.origin_width)
}

// int32 origin_height = 2;
void CameraData::clear_origin_height() {
  origin_height_ = 0;
}
::google::protobuf::int32 CameraData::origin_height() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.origin_height)
  return origin_height_;
}
void CameraData::set_origin_height(::google::protobuf::int32 value) {
  
  origin_height_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.origin_height)
}

// int32 compressed_width = 3;
void CameraData::clear_compressed_width() {
  compressed_width_ = 0;
}
::google::protobuf::int32 CameraData::compressed_width() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.compressed_width)
  return compressed_width_;
}
void CameraData::set_compressed_width(::google::protobuf::int32 value) {
  
  compressed_width_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.compressed_width)
}

// int32 compressed_height = 4;
void CameraData::clear_compressed_height() {
  compressed_height_ = 0;
}
::google::protobuf::int32 CameraData::compressed_height() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.compressed_height)
  return compressed_height_;
}
void CameraData::set_compressed_height(::google::protobuf::int32 value) {
  
  compressed_height_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.compressed_height)
}

// .camera.CameraData.camera_type camera = 5;
void CameraData::clear_camera() {
  camera_ = 0;
}
::camera::CameraData_camera_type CameraData::camera() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.camera)
  return static_cast< ::camera::CameraData_camera_type >(camera_);
}
void CameraData::set_camera(::camera::CameraData_camera_type value) {
  
  camera_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.camera)
}

// bool recording = 6;
void CameraData::clear_recording() {
  recording_ = false;
}
bool CameraData::recording() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.recording)
  return recording_;
}
void CameraData::set_recording(bool value) {
  
  recording_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.recording)
}

// bool showing_AE_ROI = 7;
void CameraData::clear_showing_ae_roi() {
  showing_ae_roi_ = false;
}
bool CameraData::showing_ae_roi() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.showing_AE_ROI)
  return showing_ae_roi_;
}
void CameraData::set_showing_ae_roi(bool value) {
  
  showing_ae_roi_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.showing_AE_ROI)
}

// bytes byte_buffer = 8;
void CameraData::clear_byte_buffer() {
  byte_buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CameraData::byte_buffer() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.byte_buffer)
  return byte_buffer_.GetNoArena();
}
void CameraData::set_byte_buffer(const ::std::string& value) {
  
  byte_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:camera.CameraData.byte_buffer)
}
#if LANG_CXX11
void CameraData::set_byte_buffer(::std::string&& value) {
  
  byte_buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:camera.CameraData.byte_buffer)
}
#endif
void CameraData::set_byte_buffer(const char* value) {
  
  byte_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:camera.CameraData.byte_buffer)
}
void CameraData::set_byte_buffer(const void* value, size_t size) {
  
  byte_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:camera.CameraData.byte_buffer)
}
::std::string* CameraData::mutable_byte_buffer() {
  
  // @@protoc_insertion_point(field_mutable:camera.CameraData.byte_buffer)
  return byte_buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CameraData::release_byte_buffer() {
  // @@protoc_insertion_point(field_release:camera.CameraData.byte_buffer)
  
  return byte_buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CameraData::set_allocated_byte_buffer(::std::string* byte_buffer) {
  if (byte_buffer != NULL) {
    
  } else {
    
  }
  byte_buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byte_buffer);
  // @@protoc_insertion_point(field_set_allocated:camera.CameraData.byte_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace camera

// @@protoc_insertion_point(global_scope)
