// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CameraData.proto

#ifndef PROTOBUF_CameraData_2eproto__INCLUDED
#define PROTOBUF_CameraData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace camera {
class CameraData;
class CameraDataDefaultTypeInternal;
extern CameraDataDefaultTypeInternal _CameraData_default_instance_;
}  // namespace camera

namespace camera {

namespace protobuf_CameraData_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_CameraData_2eproto

enum CameraData_camera_type {
  CameraData_camera_type_forward_narrow = 0,
  CameraData_camera_type_forward_wide = 1,
  CameraData_camera_type_backward_narrow = 2,
  CameraData_camera_type_left = 3,
  CameraData_camera_type_right = 4,
  CameraData_camera_type_interior = 5,
  CameraData_camera_type_CameraData_camera_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CameraData_camera_type_CameraData_camera_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CameraData_camera_type_IsValid(int value);
const CameraData_camera_type CameraData_camera_type_camera_type_MIN = CameraData_camera_type_forward_narrow;
const CameraData_camera_type CameraData_camera_type_camera_type_MAX = CameraData_camera_type_interior;
const int CameraData_camera_type_camera_type_ARRAYSIZE = CameraData_camera_type_camera_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraData_camera_type_descriptor();
inline const ::std::string& CameraData_camera_type_Name(CameraData_camera_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraData_camera_type_descriptor(), value);
}
inline bool CameraData_camera_type_Parse(
    const ::std::string& name, CameraData_camera_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraData_camera_type>(
    CameraData_camera_type_descriptor(), name, value);
}
// ===================================================================

class CameraData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:camera.CameraData) */ {
 public:
  CameraData();
  virtual ~CameraData();

  CameraData(const CameraData& from);

  inline CameraData& operator=(const CameraData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraData& default_instance();

  static inline const CameraData* internal_default_instance() {
    return reinterpret_cast<const CameraData*>(
               &_CameraData_default_instance_);
  }

  void Swap(CameraData* other);

  // implements Message ----------------------------------------------

  inline CameraData* New() const PROTOBUF_FINAL { return New(NULL); }

  CameraData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CameraData& from);
  void MergeFrom(const CameraData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CameraData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CameraData_camera_type camera_type;
  static const camera_type forward_narrow =
    CameraData_camera_type_forward_narrow;
  static const camera_type forward_wide =
    CameraData_camera_type_forward_wide;
  static const camera_type backward_narrow =
    CameraData_camera_type_backward_narrow;
  static const camera_type left =
    CameraData_camera_type_left;
  static const camera_type right =
    CameraData_camera_type_right;
  static const camera_type interior =
    CameraData_camera_type_interior;
  static inline bool camera_type_IsValid(int value) {
    return CameraData_camera_type_IsValid(value);
  }
  static const camera_type camera_type_MIN =
    CameraData_camera_type_camera_type_MIN;
  static const camera_type camera_type_MAX =
    CameraData_camera_type_camera_type_MAX;
  static const int camera_type_ARRAYSIZE =
    CameraData_camera_type_camera_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  camera_type_descriptor() {
    return CameraData_camera_type_descriptor();
  }
  static inline const ::std::string& camera_type_Name(camera_type value) {
    return CameraData_camera_type_Name(value);
  }
  static inline bool camera_type_Parse(const ::std::string& name,
      camera_type* value) {
    return CameraData_camera_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes byte_buffer = 8;
  void clear_byte_buffer();
  static const int kByteBufferFieldNumber = 8;
  const ::std::string& byte_buffer() const;
  void set_byte_buffer(const ::std::string& value);
  #if LANG_CXX11
  void set_byte_buffer(::std::string&& value);
  #endif
  void set_byte_buffer(const char* value);
  void set_byte_buffer(const void* value, size_t size);
  ::std::string* mutable_byte_buffer();
  ::std::string* release_byte_buffer();
  void set_allocated_byte_buffer(::std::string* byte_buffer);

  // int32 origin_width = 1;
  void clear_origin_width();
  static const int kOriginWidthFieldNumber = 1;
  ::google::protobuf::int32 origin_width() const;
  void set_origin_width(::google::protobuf::int32 value);

  // int32 origin_height = 2;
  void clear_origin_height();
  static const int kOriginHeightFieldNumber = 2;
  ::google::protobuf::int32 origin_height() const;
  void set_origin_height(::google::protobuf::int32 value);

  // int32 compressed_width = 3;
  void clear_compressed_width();
  static const int kCompressedWidthFieldNumber = 3;
  ::google::protobuf::int32 compressed_width() const;
  void set_compressed_width(::google::protobuf::int32 value);

  // int32 compressed_height = 4;
  void clear_compressed_height();
  static const int kCompressedHeightFieldNumber = 4;
  ::google::protobuf::int32 compressed_height() const;
  void set_compressed_height(::google::protobuf::int32 value);

  // .camera.CameraData.camera_type camera = 5;
  void clear_camera();
  static const int kCameraFieldNumber = 5;
  ::camera::CameraData_camera_type camera() const;
  void set_camera(::camera::CameraData_camera_type value);

  // bool recording = 6;
  void clear_recording();
  static const int kRecordingFieldNumber = 6;
  bool recording() const;
  void set_recording(bool value);

  // bool showing_AE_ROI = 7;
  void clear_showing_ae_roi();
  static const int kShowingAEROIFieldNumber = 7;
  bool showing_ae_roi() const;
  void set_showing_ae_roi(bool value);

  // @@protoc_insertion_point(class_scope:camera.CameraData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr byte_buffer_;
  ::google::protobuf::int32 origin_width_;
  ::google::protobuf::int32 origin_height_;
  ::google::protobuf::int32 compressed_width_;
  ::google::protobuf::int32 compressed_height_;
  int camera_;
  bool recording_;
  bool showing_ae_roi_;
  mutable int _cached_size_;
  friend struct  protobuf_CameraData_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraData

// int32 origin_width = 1;
inline void CameraData::clear_origin_width() {
  origin_width_ = 0;
}
inline ::google::protobuf::int32 CameraData::origin_width() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.origin_width)
  return origin_width_;
}
inline void CameraData::set_origin_width(::google::protobuf::int32 value) {
  
  origin_width_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.origin_width)
}

// int32 origin_height = 2;
inline void CameraData::clear_origin_height() {
  origin_height_ = 0;
}
inline ::google::protobuf::int32 CameraData::origin_height() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.origin_height)
  return origin_height_;
}
inline void CameraData::set_origin_height(::google::protobuf::int32 value) {
  
  origin_height_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.origin_height)
}

// int32 compressed_width = 3;
inline void CameraData::clear_compressed_width() {
  compressed_width_ = 0;
}
inline ::google::protobuf::int32 CameraData::compressed_width() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.compressed_width)
  return compressed_width_;
}
inline void CameraData::set_compressed_width(::google::protobuf::int32 value) {
  
  compressed_width_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.compressed_width)
}

// int32 compressed_height = 4;
inline void CameraData::clear_compressed_height() {
  compressed_height_ = 0;
}
inline ::google::protobuf::int32 CameraData::compressed_height() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.compressed_height)
  return compressed_height_;
}
inline void CameraData::set_compressed_height(::google::protobuf::int32 value) {
  
  compressed_height_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.compressed_height)
}

// .camera.CameraData.camera_type camera = 5;
inline void CameraData::clear_camera() {
  camera_ = 0;
}
inline ::camera::CameraData_camera_type CameraData::camera() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.camera)
  return static_cast< ::camera::CameraData_camera_type >(camera_);
}
inline void CameraData::set_camera(::camera::CameraData_camera_type value) {
  
  camera_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.camera)
}

// bool recording = 6;
inline void CameraData::clear_recording() {
  recording_ = false;
}
inline bool CameraData::recording() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.recording)
  return recording_;
}
inline void CameraData::set_recording(bool value) {
  
  recording_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.recording)
}

// bool showing_AE_ROI = 7;
inline void CameraData::clear_showing_ae_roi() {
  showing_ae_roi_ = false;
}
inline bool CameraData::showing_ae_roi() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.showing_AE_ROI)
  return showing_ae_roi_;
}
inline void CameraData::set_showing_ae_roi(bool value) {
  
  showing_ae_roi_ = value;
  // @@protoc_insertion_point(field_set:camera.CameraData.showing_AE_ROI)
}

// bytes byte_buffer = 8;
inline void CameraData::clear_byte_buffer() {
  byte_buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CameraData::byte_buffer() const {
  // @@protoc_insertion_point(field_get:camera.CameraData.byte_buffer)
  return byte_buffer_.GetNoArena();
}
inline void CameraData::set_byte_buffer(const ::std::string& value) {
  
  byte_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:camera.CameraData.byte_buffer)
}
#if LANG_CXX11
inline void CameraData::set_byte_buffer(::std::string&& value) {
  
  byte_buffer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:camera.CameraData.byte_buffer)
}
#endif
inline void CameraData::set_byte_buffer(const char* value) {
  
  byte_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:camera.CameraData.byte_buffer)
}
inline void CameraData::set_byte_buffer(const void* value, size_t size) {
  
  byte_buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:camera.CameraData.byte_buffer)
}
inline ::std::string* CameraData::mutable_byte_buffer() {
  
  // @@protoc_insertion_point(field_mutable:camera.CameraData.byte_buffer)
  return byte_buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraData::release_byte_buffer() {
  // @@protoc_insertion_point(field_release:camera.CameraData.byte_buffer)
  
  return byte_buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraData::set_allocated_byte_buffer(::std::string* byte_buffer) {
  if (byte_buffer != NULL) {
    
  } else {
    
  }
  byte_buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byte_buffer);
  // @@protoc_insertion_point(field_set_allocated:camera.CameraData.byte_buffer)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace camera

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::camera::CameraData_camera_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::camera::CameraData_camera_type>() {
  return ::camera::CameraData_camera_type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CameraData_2eproto__INCLUDED
